"""
Django settings for tatobato project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Try to import production dependencies, fall back to defaults if not available
try:
    from decouple import config
    import dj_database_url
    PRODUCTION_READY = True
except ImportError:
    # For development when packages aren't installed yet
    def config(key, default=None, cast=None):
        if cast and default is not None:
            return cast(default)
        return default
    PRODUCTION_READY = False

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-j5u9conah(k%64$l28j(=3=%#=5_6jb)plamnsqb9!hwcz)u8+')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1', cast=lambda v: [s.strip() for s in v.split(',')])


# Application definition

INSTALLED_APPS = [
    
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'home',
    'rest_framework',
    'corsheaders',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
]

# Add WhiteNoise middleware only if available (for production)
if PRODUCTION_READY:
    try:
        import whitenoise
        MIDDLEWARE.append('whitenoise.middleware.WhiteNoiseMiddleware')
    except ImportError:
        pass

MIDDLEWARE += [
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'tatobato.urls'

# CORS settings
CORS_ALLOW_ALL_ORIGINS = config('DEBUG', default=True, cast=bool)  # Only allow all origins in development
CORS_ALLOWED_ORIGINS = config('CORS_ALLOWED_ORIGINS', default='http://localhost:5173', cast=lambda v: [s.strip() for s in v.split(',')])
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'tatobato.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if PRODUCTION_READY:
    # Use environment variable for database URL in production
    DATABASE_URL = config('DATABASE_URL', default='postgresql://postgres.dvsxuyrmwzqknitfejqu:tatobato@123@aws-0-ap-southeast-1.pooler.supabase.com:6543/postgres?sslmode=require')
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    # Use direct configuration for development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'postgres',  # Your Supabase database name
            'USER': 'postgres.dvsxuyrmwzqknitfejqu',  # Your Supabase DB user
            'PASSWORD': 'tatobato@123',  # Replace with your actual password
            'HOST': 'aws-0-ap-southeast-1.pooler.supabase.com',  # Supabase host (pooler endpoint)
            'PORT': '6543',  # Supabase port
            'OPTIONS': {
                'sslmode': 'require',  # Supabase requires SSL connections
            },
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'home', 'static'),
]

# WhiteNoise configuration for static files (only works if whitenoise is installed)
if PRODUCTION_READY:
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'



# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
